{
    "name": "highlight",
    "scopeName": "source.highlight",
    "patterns": [
        {
            "include": "#G16"
        }
    ],
    "repository": {
        "forIter": {
            "begin": "(\\;)",
            "end": "(\\;)",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "patterns": [
                {
                    "include": "#G"
                }
            ]
        },
        "forIter,forIn": {
            "begin": "(for(?=[\\t-\\n\\r ]|\\%\\%|\\%(?!\\%)|\\())",
            "end": "\\)",
            "beginCaptures": {
                "1": {
                    "name": "keyword"
                }
            },
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G7"
                }
            ]
        },
        "G10": {
            "patterns": [
                {
                    "include": "#empty"
                },
                {
                    "include": "#T"
                },
                {
                    "include": "#iffElse,iff3"
                },
                {
                    "include": "#S"
                }
            ]
        },
        "G13": {
            "patterns": [
                {
                    "include": "#add,inn,mult,subt,divide,equals"
                },
                {
                    "include": "#empty"
                },
                {
                    "include": "#T"
                },
                {
                    "include": "#nat,booll,var"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#brac"
                },
                {
                    "include": "#iffElse,iff6"
                },
                {
                    "include": "#S"
                }
            ]
        },
        "iffElse,iff4": {
            "begin": "\\)",
            "end": "(?=\\})",
            "beginCaptures": [],
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G4"
                }
            ]
        },
        "iffElse,iff5": {
            "begin": "(if(?=[\\t-\\n\\r ]|\\%\\%|\\%(?!\\%)|\\())",
            "end": "(?=\\})",
            "beginCaptures": {
                "1": {
                    "name": "keyword"
                }
            },
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G19"
                }
            ]
        },
        "iffElse,iff6": {
            "begin": "\\)",
            "end": "(?:x(?<!x))",
            "beginCaptures": [],
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G18"
                }
            ]
        },
        "iffElse,iff7": {
            "begin": "\\(",
            "end": "(?=\\})",
            "beginCaptures": [],
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G17"
                }
            ]
        },
        "S1": {
            "begin": "\\{",
            "end": "\\}",
            "beginCaptures": [],
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G5"
                }
            ]
        },
        "iffElse,iff": {
            "begin": "(if(?=[\\t-\\n\\r ]|\\%\\%|\\%(?!\\%)|\\())",
            "end": "\\)",
            "beginCaptures": {
                "1": {
                    "name": "keyword"
                }
            },
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G8"
                }
            ]
        },
        "assign1": {
            "begin": "\\=",
            "end": "(?=\\;)",
            "beginCaptures": [],
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G"
                }
            ]
        },
        "iffElse": {
            "match": "(else(?![0-9a-z]))",
            "captures": {
                "1": {
                    "name": "keyword"
                }
            }
        },
        "G20": {
            "patterns": [
                {
                    "include": "#add,inn,mult,subt,divide,equals"
                },
                {
                    "include": "#nat,booll,var"
                },
                {
                    "include": "#T"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#forIter"
                },
                {
                    "include": "#brac"
                },
                {
                    "include": "#string"
                }
            ]
        },
        "escape,dollarChar,char": {
            "match": "(\\\\.)|\\$(?!\\{)|[^\\\"\\$\\\\]",
            "captures": {
                "1": {
                    "name": "constant.character.escape"
                }
            }
        },
        "G": {
            "patterns": [
                {
                    "include": "#T"
                },
                {
                    "include": "#add,inn,mult,subt,divide,equals"
                },
                {
                    "include": "#nat,booll,var"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#brac"
                },
                {
                    "include": "#string"
                }
            ]
        },
        "G11": {
            "patterns": [
                {
                    "include": "#empty"
                },
                {
                    "include": "#T"
                },
                {
                    "include": "#forIter,forIn1"
                },
                {
                    "include": "#S"
                }
            ]
        },
        "G12": {
            "patterns": [
                {
                    "include": "#add,inn,mult,subt,divide,equals"
                },
                {
                    "include": "#empty"
                },
                {
                    "include": "#T"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#brac"
                },
                {
                    "include": "#forIter,forIn3"
                },
                {
                    "include": "#forIter"
                },
                {
                    "include": "#nat,booll,var,forIn"
                }
            ]
        },
        "add,inn,mult,subt,divide,equals": {
            "match": "(\\/|\\=\\=|\\*|\\+|\\-|in(?![0-9a-z]))",
            "captures": {
                "1": {
                    "name": "keyword.operator"
                }
            }
        },
        "G14": {
            "patterns": [
                {
                    "include": "#add,inn,mult,subt,divide,equals"
                },
                {
                    "include": "#T"
                },
                {
                    "include": "#brac"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#forIter"
                },
                {
                    "include": "#nat,booll,var,forIn1"
                }
            ]
        },
        "G1": {
            "include": "#single,multiple1"
        },
        "embedded": {
            "begin": "(\\$\\{)",
            "end": "(\\})",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.template-expression"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.template-expression"
                }
            },
            "patterns": [
                {
                    "include": "#G"
                }
            ],
            "contentName": "meta.embedded.line"
        },
        "G15": {
            "patterns": [
                {
                    "include": "#add,inn,mult,subt,divide,equals"
                },
                {
                    "include": "#T"
                },
                {
                    "include": "#empty"
                },
                {
                    "include": "#nat,booll,var"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#brac"
                },
                {
                    "include": "#forIter,forIn3"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#forIter"
                }
            ]
        },
        "G2": {
            "patterns": [
                {
                    "include": "#escape,dollarChar,char"
                },
                {
                    "include": "#embedded"
                }
            ]
        },
        "G16": {
            "patterns": [
                {
                    "include": "#empty"
                },
                {
                    "include": "#T"
                },
                {
                    "include": "#S1"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#iffElse,iff1"
                },
                {
                    "include": "#forIter,forIn4"
                },
                {
                    "include": "#assign"
                }
            ]
        },
        "G3": {
            "include": "#single,multiple"
        },
        "G17": {
            "patterns": [
                {
                    "include": "#T"
                },
                {
                    "include": "#add,inn,mult,subt,divide,equals"
                },
                {
                    "include": "#nat,booll,var"
                },
                {
                    "include": "#iffElse,iff4"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#brac"
                },
                {
                    "include": "#string"
                }
            ]
        },
        "G4": {
            "patterns": [
                {
                    "include": "#iffElse"
                },
                {
                    "include": "#T"
                },
                {
                    "include": "#S1"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#assign"
                },
                {
                    "include": "#forIter,forIn"
                },
                {
                    "include": "#iffElse,iff"
                }
            ]
        },
        "empty": {
            "match": "(?:x(?<!x))",
            "captures": []
        },
        "G18": {
            "patterns": [
                {
                    "include": "#T"
                },
                {
                    "include": "#iffElse"
                },
                {
                    "include": "#empty"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#iffElse,iff"
                },
                {
                    "include": "#S1"
                },
                {
                    "include": "#assign"
                },
                {
                    "include": "#forIter,forIn"
                }
            ]
        },
        "G5": {
            "patterns": [
                {
                    "include": "#T"
                },
                {
                    "include": "#iffElse,iff5"
                },
                {
                    "include": "#forIter,forIn"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#S1"
                },
                {
                    "include": "#assign"
                }
            ]
        },
        "forIter,forIn1": {
            "begin": "\\(",
            "end": "(?:x(?<!x))",
            "beginCaptures": [],
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G12"
                }
            ]
        },
        "G19": {
            "patterns": [
                {
                    "include": "#T"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#iffElse,iff7"
                }
            ]
        },
        "G6": {
            "patterns": [
                {
                    "include": "#T"
                },
                {
                    "include": "#S"
                },
                {
                    "include": "#assign1"
                }
            ]
        },
        "assign": {
            "begin": "(?!(?<![a-z])(?:else|for|false|true|in|if)(?![0-9a-z]))((?<![a-z])[a-z][0-9a-z]*(?![0-9a-z]))",
            "end": "\\;",
            "beginCaptures": {
                "1": {
                    "name": "variable.parameter"
                }
            },
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G6"
                }
            ]
        },
        "forIter,forIn2": {
            "begin": "\\(",
            "end": "(?=\\))",
            "beginCaptures": [],
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G14"
                }
            ]
        },
        "G7": {
            "patterns": [
                {
                    "include": "#T"
                },
                {
                    "include": "#forIter,forIn2"
                },
                {
                    "include": "#S"
                }
            ]
        },
        "forIter,forIn3": {
            "begin": "\\)",
            "end": "(?:x(?<!x))",
            "beginCaptures": [],
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G9"
                }
            ]
        },
        "string": {
            "begin": "(\\\")",
            "end": "(\\\")",
            "beginCaptures": {
                "1": {
                    "name": "string.template"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "string.template"
                }
            },
            "patterns": [
                {
                    "include": "#G2"
                }
            ],
            "contentName": "string.template"
        },
        "G8": {
            "patterns": [
                {
                    "include": "#T"
                },
                {
                    "include": "#iffElse,iff2"
                },
                {
                    "include": "#S"
                }
            ]
        },
        "forIter,forIn4": {
            "begin": "(for(?=[\\t-\\n\\r ]|\\%\\%|\\%(?!\\%)|\\())",
            "end": "(?:x(?<!x))",
            "beginCaptures": {
                "1": {
                    "name": "keyword"
                }
            },
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G11"
                }
            ]
        },
        "brac": {
            "begin": "(\\()",
            "end": "(\\))",
            "beginCaptures": {
                "1": {
                    "name": "variable.parameter"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "variable.parameter"
                }
            },
            "patterns": [
                {
                    "include": "#G"
                }
            ]
        },
        "G9": {
            "patterns": [
                {
                    "include": "#empty"
                },
                {
                    "include": "#T"
                },
                {
                    "include": "#forIter,forIn"
                },
                {
                    "include": "#S1"
                },
                {
                    "include": "#assign"
                },
                {
                    "include": "#iffElse,iff1"
                },
                {
                    "include": "#S"
                }
            ]
        },
        "iffElse,iff1": {
            "begin": "(if(?=[\\t-\\n\\r ]|\\%\\%|\\%(?!\\%)|\\())",
            "end": "(?:x(?<!x))",
            "beginCaptures": {
                "1": {
                    "name": "keyword"
                }
            },
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G10"
                }
            ]
        },
        "nat,booll,var": {
            "match": "([0-9]+(?![0-9a-z]))|((?:false|true)(?![0-9a-z]))|(?!(?<![a-z])(?:else|for|false|true|in|if)(?![0-9a-z]))((?<![a-z])[a-z][0-9a-z]*(?![0-9a-z]))",
            "captures": {
                "1": {
                    "name": "constant.numeric"
                },
                "2": {
                    "name": "constant.other"
                },
                "3": {
                    "name": "variable"
                }
            }
        },
        "S": {
            "begin": "(\\%(?!\\%))",
            "end": "(\\%)",
            "beginCaptures": {
                "1": {
                    "name": "comment.block"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "comment.block"
                }
            },
            "patterns": [
                {
                    "include": "#G1"
                }
            ],
            "contentName": "comment.block"
        },
        "iffElse,iff2": {
            "begin": "\\(",
            "end": "(?=\\))",
            "beginCaptures": [],
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G"
                }
            ]
        },
        "nat,booll,var,forIn": {
            "begin": "([0-9]+(?![0-9a-z]))|((?:false|true)(?![0-9a-z]))|(?!(?<![a-z])(?:else|for|false|true|in|if)(?![0-9a-z]))((?<![a-z])[a-z][0-9a-z]*(?![0-9a-z]))",
            "end": "(?:x(?<!x))",
            "beginCaptures": {
                "1": {
                    "name": "constant.numeric"
                },
                "2": {
                    "name": "constant.other"
                },
                "3": {
                    "name": "variable"
                }
            },
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G15"
                }
            ]
        },
        "T": {
            "match": "(\\%\\%[^\\n]*(?:(?!.)|(?=(?<!\\r)\\n|\\r\\n)))|[\\t-\\n\\r ]",
            "captures": {
                "1": {
                    "name": "comment.line"
                }
            }
        },
        "iffElse,iff3": {
            "begin": "\\(",
            "end": "(?:x(?<!x))",
            "beginCaptures": [],
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G13"
                }
            ]
        },
        "single,multiple": {
            "match": "[^\\%]",
            "captures": []
        },
        "nat,booll,var,forIn1": {
            "begin": "([0-9]+(?![0-9a-z]))|((?:false|true)(?![0-9a-z]))|(?!(?<![a-z])(?:else|for|false|true|in|if)(?![0-9a-z]))((?<![a-z])[a-z][0-9a-z]*(?![0-9a-z]))",
            "end": "(?=\\))",
            "beginCaptures": {
                "1": {
                    "name": "constant.numeric"
                },
                "2": {
                    "name": "constant.other"
                },
                "3": {
                    "name": "variable"
                }
            },
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G20"
                }
            ]
        },
        "single,multiple1": {
            "begin": "[^\\%]",
            "end": "(?=\\%)",
            "beginCaptures": [],
            "endCaptures": [],
            "patterns": [
                {
                    "include": "#G3"
                }
            ]
        }
    },
    "foldingEnd": "\\)",
    "fileTypes": [],
    "foldingStart": "\\(",
    "firstLineMatch": ""
}